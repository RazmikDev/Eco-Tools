<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Eco.Collections.Generic.Fixed
{
<#
var maxSize = 64;
for (var size = 4; size <= maxSize; size*=2) 
{
#>	
	/// <summary>
	/// Represents a <#=size#>-cell value type array.
	/// </summary>
	/// <typeparam name="T">The type of stored item.</typeparam>
	public struct Bunch<#=size#><T> : IEnumerable<T>
	{		
		#region Fields
<#
for (var fieldIndex = 0; fieldIndex < size; fieldIndex++)
{
#>
		
		private T _item<#=fieldIndex#>;
<#
}
#>
		
		#endregion

		/// <summary>
		/// Gets the maximum size of the <see cref="Bunch<#=size#>{T}"/> collection.
		/// </summary>
		public Int32 Length
		{
			get { return <#=size#>;}
		}

		/// <summary>
		/// Gets or sets the element at the specified index.
		/// </summary>
		/// <param name="index">The zero-based index of the element to get or set.</param>
		/// <returns>The element at the specified index.</returns>
		/// <exception cref="T:System.ArgumentOutOfRangeException">
		/// <param name="index"/> is less then zero -or- greater than maximum length of the bunch.
		///	</exception>
		public T this[Int32 index]
		{
			get
			{
				if (index < 0)
					throw new IndexOutOfRangeException("Provided index is less then zero");

				switch (index)
				{
<#
for (var fieldIndex = 0; fieldIndex < size; fieldIndex++)
{
#>
					case <#=fieldIndex#>:
						return _item<#=fieldIndex#>;
								
<#
}
#>
					default:
						throw new IndexOutOfRangeException("Provided index is greater then size of the bunch");
				}
			}
			set
			{
				if (index < 0)
					throw new IndexOutOfRangeException("Provided index is less then zero");

				switch (index)
				{
<#
for (var fieldIndex = 0; fieldIndex < size; fieldIndex++)
{
#>
					case <#=fieldIndex#>:
						_item<#=fieldIndex#> = value;
						break;
								
<#
}
#>
					default:
						throw new IndexOutOfRangeException("Provided index is greater then size of the bunch");
				}
			}
		}

		#region Enumeration

		/// <summary>
		/// Returns an enumerator that iterates through the bunch.
		/// </summary>
		/// <returns>A <see cref="Enumerator"/> that can be used to iterate through the bunch.</returns>	
		public Enumerator GetEnumerator()
		{
			return new Enumerator(this);
		}

		IEnumerator<T> IEnumerable<T>.GetEnumerator()
		{
			throw new NotImplementedException();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			throw new NotImplementedException();
		}

		#region Enumerator

		public struct Enumerator : IEnumerator<T>
		{
			#region Fields

			private readonly Bunch<#=size#><T> _bunch;

			private Int32 _currentIndex;

			#endregion

			public Enumerator(Bunch<#=size#><T> bunch)
			{
				_bunch = bunch;
				_currentIndex = -1;
			}

			public bool MoveNext()
			{
				++_currentIndex;

				return _currentIndex < _bunch.Length;
			}

			public void Reset()
			{
				_currentIndex = -1;
			}

			public T Current
			{
				get
				{
					return _bunch[_currentIndex];
				}
			}

			object IEnumerator.Current
			{
				get { return Current; }
			}

			public void Dispose()
			{
			}
		}

		#endregion
		
		#endregion
	}
<# 
} 
#>
}