<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using NUnit.Framework;

namespace Eco.Collections.Generic.Fixed
{
<#
var maxSize = 64;
for (var size = 4; size <= maxSize; size*=2) 
{
#>
	[TestFixture]
	public class Bunch<#=size#>Test
	{
		[Test]
		public void Bunch<#=size#>_SetWithNegativeIndexTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

			Assert.Throws<IndexOutOfRangeException>(() => bunch[-1] = 1);
		}

		[Test]
		public void Bunch<#=size#>_GetWithNegativeIndexTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

			Assert.Throws<IndexOutOfRangeException>(() => { var temp = bunch[-1]; });
		}

		[Test]
		public void Bunch<#=size#>_SetWithOutOfRangeIndexTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

			Assert.Throws<IndexOutOfRangeException>(() => bunch[<#=size#>] = 1);
		}

		[Test]
		public void Bunch<#=size#>_GetWithOutOfRangeIndexTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

			Assert.Throws<IndexOutOfRangeException>(() => { var temp = bunch[<#=size#>]; });
		}

		[Test]
		public void Bunch<#=size#>_IndexerTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

<#
for (var index = 0; index < size; index++)
{
	var testValue = Int32.MaxValue/(index + 1);
#>
			bunch[<#=index#>] = <#=testValue#>;
<#
}
#>

<#
for (var index = 0; index < size; index++)
{
	var expectedValue = Int32.MaxValue/(index + 1);
#>
			Assert.AreEqual(<#=expectedValue#>, bunch[<#=index#>]);
<#
}
#>
		}

		[Test]
		public void Bunch<#=size#>_EnumerationTest()
		{
			var bunch = new Bunch<#=size#><Int32>();

<#
for (var index = 0; index < size; index++)
{
	var testValue = Int32.MaxValue/(index + 1);
#>
			bunch[<#=index#>] = <#=testValue#>;
<#
}
#>

			var index = -1;
			foreach (var item in bunch)
			{
				++index;
				switch(index)
				{
<#
for (var index = 0; index < size; index++)
{
	var expectedValue = Int32.MaxValue/(index + 1);
#>
					case <#=index#>:
						Assert.AreEqual(<#=expectedValue#>, item);
						break;
<#
}
#>

					default:
						Assert.Fail("Out of range enumeration");
						break;
				}
			}
		}
	}
<# 
} 
#>
}